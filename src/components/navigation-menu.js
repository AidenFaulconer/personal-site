import React, { useState, useEffect, useCallback } from "react";
import { Link } from "gatsby";

// #region hardcoded SVGS (will be replaced by a proper inline svg loader when i find one)
export const standardSVGDimensions = [51];

export const navSvgs = {
  // main page
  main: `<svg width="51" height="51" viewBox="0 0 51 51" xmlns="http://www.w3.org/2000/svg">
<path d="M20.4018 38.271C20.9541 38.271 21.4018 37.8232 21.4018 37.271V27.7897C21.4018 27.2374 21.8495 26.7897 22.4018 26.7897H28.8327C29.385 26.7897 29.8327 27.2374 29.8327 27.7897V37.271C29.8327 37.8232 30.2804 38.271 30.8327 38.271H39.3713C39.9236 38.271 40.3713 37.8232 40.3713 37.271V23.9626C40.3713 23.4103 40.819 22.9626 41.3713 22.9626H43.8902C44.8303 22.9626 45.2509 21.783 44.5229 21.1882L26.25 6.2576C25.8818 5.95676 25.3527 5.95676 24.9845 6.2576L6.71162 21.1882C5.98362 21.783 6.40424 22.9626 7.34435 22.9626H9.86321C10.4155 22.9626 10.8632 23.4103 10.8632 23.9626V37.271C10.8632 37.8232 11.3109 38.271 11.8632 38.271H20.4018Z" />
</svg>
`,
  projects: `<svg width="51" height="47" viewBox="0 0 51 51" xmlns="http://www.w3.org/2000/svg">
<path d="M42.479 11.9637H26.006C25.756 11.9637 25.515 11.87 25.3306 11.7011L21.6885 8.36524C21.5041 8.19634 21.2631 8.10266 21.0131 8.10266H8.75548C6.41591 8.10266 4.54004 9.82083 4.54004 11.9637V35.1301C4.54004 36.1541 4.98416 37.1361 5.77471 37.8602C6.56526 38.5843 7.63748 38.9911 8.75548 38.9911H42.479C44.7975 38.9911 46.6945 37.2536 46.6945 35.1301V15.8248C46.6945 13.7012 44.7975 11.9637 42.479 11.9637ZM39.1488 26.4427L32.6253 32.5575C32.2403 32.9185 31.641 32.918 31.2565 32.5565L24.7531 26.4427C23.9732 25.7091 23.5095 24.7438 23.5095 23.6434C23.5095 21.4619 25.4065 19.6858 27.725 19.6858C28.8632 19.6858 29.9381 20.1299 30.7179 20.8635L31.2588 21.3674C31.6428 21.7252 32.2381 21.7252 32.6221 21.3675L33.184 20.8441C33.9428 20.1299 35.0177 19.6858 36.1559 19.6858C38.4744 19.6858 40.3713 21.4619 40.3713 23.6434C40.3713 24.7245 39.9076 25.7284 39.1488 26.4427Z" />
</svg>
`,
  services: `<svg width="51" height="51" viewBox="0 0 51 51" xmlns="http://www.w3.org/2000/svg">
<path d="M44.5868 26.2035C45.8514 26.2035 46.9053 26.5998 47.5376 27.3926C48.3807 28.1853 48.8022 29.1761 48.8022 30.167L31.9404 36.1123L17.1864 32.1488V14.3129H21.191L36.5774 19.6636C37.6313 20.06 38.2636 20.8527 38.2636 21.8436C38.2636 22.4381 38.0528 23.0327 37.6313 23.429C37.2097 23.8254 36.5774 24.2217 35.7343 24.2217H29.8327L26.2496 22.8345L25.6173 24.6181L29.8327 26.2035H44.5868V26.2035ZM4.54004 14.3129H12.9709V36.1123H4.54004V14.3129Z" />
</svg>
`,
  skills: `<svg width="51" height="51" viewBox="0 0 51 51" xmlns="http://www.w3.org/2000/svg">
<path d="M10.9497 45.2031H40.6997C43.0436 45.2031 44.9497 43.3717 44.9497 41.1198V12.5364C44.9497 10.2845 43.0436 8.45308 40.6997 8.45308H36.4497V4.36975H32.1997V8.45308H19.4497V4.36975H15.1997V8.45308H10.9497C8.60583 8.45308 6.69971 10.2845 6.69971 12.5364V41.1198C6.69971 43.3717 8.60583 45.2031 10.9497 45.2031ZM23.6997 37.8817L15.8223 30.3132L18.8271 27.4263L23.6997 32.1078L32.8223 23.343L35.8271 26.2299L23.6997 37.8817ZM10.9497 14.5781H40.6997V18.6614H10.9497V14.5781Z" />
</svg>
`,
  about: `<svg width="51" height="51" viewBox="0 0 51 51" xmlns="http://www.w3.org/2000/svg">
<path d="M27.7255 6.17334C19.7794 6.17334 13.3719 11.8964 12.9714 19.0939L8.92459 24.0021C8.41873 24.6035 8.92459 25.5735 9.80983 25.5735H12.9714V31.3936C12.9714 33.547 14.8473 35.2736 17.1869 35.2736H19.2946V41.0937H34.0486V31.995C39.0439 29.8222 42.4795 25.1855 42.4795 19.7535C42.4795 12.265 35.9034 6.17334 27.7255 6.17334ZM36.1564 17.4836C36.1564 20.4713 33.2899 22.8575 28.948 26.4853L27.7255 27.5135L26.503 26.4853C22.1611 22.8575 19.2946 20.4713 19.2946 17.4836C19.2946 15.1556 21.318 13.235 23.8473 13.2156H23.9316C25.3859 13.2156 26.777 13.817 27.7255 14.8258C28.6739 13.817 30.065 13.2156 31.5194 13.2156C34.0486 13.1962 36.1564 15.078 36.1564 17.406V17.4836V17.4836Z" />
</svg>`,
  contact: `<svg width="51" height="51" viewBox="0 0 51 51" xmlns="http://www.w3.org/2000/svg">
<path d="M40.3715 6.15139H38.2638V2.2312H34.0483V6.15139H17.1866V2.2312H12.9711V6.15139H10.8634C9.74539 6.15139 8.67317 6.56441 7.88262 7.29959C7.09207 8.03477 6.64795 9.03188 6.64795 10.0716V37.5129C6.64795 38.5526 7.09207 39.5497 7.88262 40.2849C8.67317 41.0201 9.74539 41.4331 10.8634 41.4331H40.3715C42.69 41.4331 44.5869 39.669 44.5869 37.5129V10.0716C44.5869 7.91548 42.69 6.15139 40.3715 6.15139ZM25.6174 12.0317C29.1163 12.0317 31.9406 14.6582 31.9406 17.912C31.9406 21.1657 29.1163 23.7922 25.6174 23.7922C22.1186 23.7922 19.2943 21.1657 19.2943 17.912C19.2943 14.6582 22.1186 12.0317 25.6174 12.0317ZM38.2638 35.5528H12.9711V33.5927C12.9711 29.6725 21.402 27.5164 25.6174 27.5164C29.8329 27.5164 38.2638 29.6725 38.2638 33.5927V35.5528Z" />
</svg>`,
  // blog
  uiux: `<svg width="51" height="48" viewBox="0 0 51 48">
   <path d="M31.3443 23.2244L33.4547 25.446L30.8248 28.2146C30.63 28.4197 30.63 28.6248 30.8248 28.8298L31.3767 29.4109C31.5716 29.616 31.7664 29.616 31.9612 29.4109L34.5911 26.6423L38.6497 30.9148L36.0198 33.6833C35.825 33.8884 35.825 34.0821 36.0198 34.2644L36.5717 34.8796C36.7665 35.0847 36.9614 35.0847 37.1562 34.8796L39.7861 32.1111L41.8317 34.2644C42.0265 34.4695 42.1239 34.7201 42.1239 35.0164C42.1239 35.3126 42.0265 35.5746 41.8317 35.8025L36.6367 41.2712C36.4202 41.4763 36.1713 41.5789 35.8899 41.5789C35.6085 41.5789 35.3704 41.4763 35.1756 41.2712L24.6882 30.2312L18.5841 36.657C18.2378 37.0216 17.8157 37.2039 17.3178 37.2039C16.82 37.2039 16.3979 37.0216 16.0515 36.657L13.5839 34.0251C13.2376 33.6606 13.0644 33.2219 13.0644 32.7092C13.0644 32.1965 13.2376 31.7579 13.5839 31.3933L19.688 24.9675L9.16819 13.8933C8.97338 13.6882 8.87598 13.4376 8.87598 13.1414C8.87598 12.8451 8.97338 12.5945 9.16819 12.3894L14.3632 6.88647C14.5796 6.6814 14.8286 6.57886 15.11 6.57886C15.3914 6.57886 15.6295 6.6814 15.8243 6.88647L17.8698 9.03979L15.2398 11.8083C15.045 12.0134 15.045 12.2185 15.2398 12.4236L15.7918 13.0046C15.9866 13.2097 16.1814 13.2097 16.3762 13.0046L19.0062 10.2361L23.0648 14.5085L20.4348 17.2771C20.24 17.4822 20.24 17.6873 20.4348 17.8923L20.9868 18.4734C21.1816 18.6785 21.3764 18.6785 21.5712 18.4734L24.2012 15.7048L26.3116 17.9607L36.6042 7.12573C36.9505 6.76115 37.3672 6.57886 37.8542 6.57886C38.3413 6.57886 38.758 6.76115 39.1043 7.12573L41.6044 9.75757C41.9507 10.1222 42.1239 10.5608 42.1239 11.0735C42.1239 11.5862 41.9507 12.0248 41.6044 12.3894L31.3443 23.2244ZM11.0189 34.196C11.0622 34.3783 11.138 34.5264 11.2462 34.6404L15.4671 39.0837C15.5753 39.1977 15.716 39.2774 15.8892 39.323C15.781 39.5509 15.6944 39.6876 15.6295 39.7332L9.91497 41.5789C9.39547 41.5789 9.09243 41.5333 9.00585 41.4421C8.91927 41.351 8.87598 41.032 8.87598 40.4851L10.6293 34.4695C10.6726 34.4239 10.8024 34.3328 11.0189 34.196Z" />
</svg>
`,
  datascience: `<svg width="52" height="47" viewBox="0 0 52 47">
   <path d="M41.1239 12.6375V15.3161C41.1239 17.6766 34.35 19.6018 26.0009 19.6018C17.6517 19.6018 10.8779 17.6766 10.8779 15.3161V12.6375C10.8779 10.277 17.6517 8.35181 26.0009 8.35181C34.35 8.35181 41.1239 10.277 41.1239 12.6375ZM41.1239 18.6643V24.6911C41.1239 27.0516 34.35 28.9768 26.0009 28.9768C17.6517 28.9768 10.8779 27.0516 10.8779 24.6911V18.6643C14.127 20.6063 20.0738 21.5103 26.0009 21.5103C31.928 21.5103 37.8747 20.6063 41.1239 18.6643ZM41.1239 28.0393V34.0661C41.1239 36.4266 34.35 38.3518 26.0009 38.3518C17.6517 38.3518 10.8779 36.4266 10.8779 34.0661V28.0393C14.127 29.9813 20.0738 30.8853 26.0009 30.8853C31.928 30.8853 37.8747 29.9813 41.1239 28.0393Z" />
</svg>
`,
  workflow: `<svg width="51" height="47" viewBox="0 0 51 47" >
<path d="M25.5002 4.32886C15.7014 4.32886 7.76221 12.4203 7.76221 22.407C7.76221 32.3937 15.7014 40.4851 25.5002 40.4851C35.299 40.4851 43.2382 32.3937 43.2382 22.407C43.2382 12.4203 35.299 4.32886 25.5002 4.32886ZM32.1154 27.1452L30.685 28.9676C30.5911 29.0872 30.475 29.1868 30.3434 29.2607C30.2117 29.3346 30.0671 29.3813 29.9177 29.3983C29.7683 29.4152 29.6172 29.402 29.4728 29.3593C29.3284 29.3167 29.1937 29.2455 29.0764 29.1498L24.2843 25.5255C23.9494 25.2522 23.6792 24.9058 23.4935 24.5117C23.3077 24.1177 23.2114 23.6861 23.2114 23.2489V11.91C23.2114 11.6007 23.332 11.304 23.5466 11.0853C23.7612 10.8666 24.0523 10.7437 24.3558 10.7437H26.6446C26.9481 10.7437 27.2392 10.8666 27.4538 11.0853C27.6684 11.304 27.789 11.6007 27.789 11.91V22.407L31.9373 25.505C32.0548 25.6008 32.1525 25.7192 32.225 25.8534C32.2975 25.9877 32.3434 26.1352 32.3599 26.2875C32.3764 26.4398 32.3634 26.594 32.3214 26.7411C32.2795 26.8883 32.2095 27.0256 32.1154 27.1452Z" />
</svg>

`,
  "3d": `<svg width="51" height="47" viewBox="0 0 51 47">
   <path d="M42.5841 14.719V14.5656L42.4625 14.2779C42.4202 14.2169 42.3728 14.1592 42.3208 14.1053C42.2666 14.0241 42.2056 13.9472 42.1385 13.8752L41.9562 13.7409L41.6321 13.5875L26.4417 4.70778C26.1198 4.51727 25.7479 4.41626 25.3683 4.41626C24.9887 4.41626 24.6167 4.51727 24.2948 4.70778L9.22596 13.5875L9.04368 13.7409L8.86139 13.8752C8.79425 13.9472 8.7333 14.0241 8.67911 14.1053C8.62704 14.1592 8.57963 14.2169 8.53733 14.2779L8.41581 14.5656V14.719C8.3959 14.8847 8.3959 15.052 8.41581 15.2177V31.9798C8.41512 32.3057 8.50216 32.6264 8.66872 32.9117C8.83528 33.1969 9.07586 33.4372 9.36774 33.61L24.5581 42.4897C24.6516 42.5444 24.7544 42.5833 24.8619 42.6048H25.024C25.3666 42.7077 25.7345 42.7077 26.0772 42.6048H26.2392C26.3467 42.5833 26.4495 42.5444 26.543 42.4897L41.6321 33.61C41.924 33.4372 42.1646 33.1969 42.3311 32.9117C42.4977 32.6264 42.5847 32.3057 42.5841 31.9798V15.2177C42.604 15.052 42.604 14.8847 42.5841 14.719V14.719ZM23.4037 37.4265L12.264 30.9058V18.6698L23.4037 25.1714V37.4265ZM25.429 21.8535L14.0869 15.2177L25.429 8.60104L36.7712 15.2177L25.429 21.8535ZM38.594 30.9058L27.4544 37.4265V25.1714L38.594 18.6698V30.9058Z" />
</svg>
`,
  ai: `<svg width="51" height="47" viewBox="0 0 51 47" >
<path d="M39.3752 16.2411C39.6235 15.3563 39.6773 14.4269 39.5329 13.5187C39.3884 12.6104 39.0492 11.7455 38.5392 10.9851C38.0292 10.2247 37.3609 9.58732 36.5816 9.11815C35.8023 8.64897 34.9309 8.35941 34.0292 8.26996C33.6674 7.21577 32.9918 6.30187 32.096 5.65475C31.2002 5.00763 30.1284 4.65929 29.0291 4.65796C27.7227 4.66245 26.4648 5.16064 25.5004 6.05546C24.536 5.16064 23.278 4.66245 21.9717 4.65796C19.6763 4.65796 17.7196 6.14683 16.9874 8.26817C16.0841 8.35538 15.2108 8.64338 14.4294 9.11173C13.648 9.58009 12.9777 10.2173 12.466 10.9782C11.9543 11.7391 11.6137 12.6051 11.4685 13.5146C11.3232 14.4241 11.3769 15.355 11.6256 16.2411C10.4929 16.853 9.54453 17.7649 8.88102 18.88C8.21751 19.9951 7.86363 21.2718 7.85693 22.5746C7.85693 24.5007 8.61207 26.312 9.92475 27.6486C9.7239 28.3275 9.62166 29.0325 9.62128 29.7413C9.62128 33.2476 12.1125 36.1734 15.4542 36.7897C15.9448 37.8907 16.7369 38.8252 17.7362 39.4815C18.7354 40.1379 19.8995 40.4884 21.0895 40.4913C22.8168 40.4913 24.3783 39.7621 25.5004 38.5939C26.0731 39.1939 26.7586 39.671 27.5163 39.9969C28.274 40.3228 29.0884 40.4909 29.9113 40.4913C31.0992 40.4891 32.2614 40.1399 33.2593 39.4855C34.2573 38.8311 35.0488 37.899 35.5395 36.8005C36.5239 36.6242 37.4604 36.2379 38.2869 35.6671C39.1135 35.0963 39.8115 34.3539 40.3347 33.489C40.858 32.6241 41.1946 31.6563 41.3224 30.6496C41.4501 29.6428 41.3662 28.62 41.076 27.6486C41.732 26.9823 42.2523 26.1912 42.6071 25.3206C42.9619 24.4499 43.1443 23.5169 43.1438 22.5746C43.1371 21.2718 42.7833 19.9951 42.1198 18.88C41.4562 17.7649 40.5079 16.853 39.3752 16.2411ZM21.0895 36.908C19.8351 36.908 18.7429 36.005 18.4959 34.7615L18.1219 33.3246H16.6787C14.7326 33.3246 13.15 31.7175 13.15 29.7413C13.15 29.1106 13.2999 28.5194 13.5963 27.9837L14.4009 26.5217L13.0176 25.6079C12.518 25.2808 12.1068 24.8318 11.8218 24.302C11.5367 23.7722 11.3868 23.1784 11.3856 22.5746C11.3856 20.8242 12.6612 19.3066 14.3533 19.0415L17.3403 18.5756L15.4718 16.164C15.1391 15.7284 14.9461 15.1996 14.919 14.649C14.892 14.0984 15.032 13.5526 15.3204 13.0855C15.6087 12.6183 16.0313 12.2524 16.5311 12.0372C17.0309 11.8219 17.5837 11.7677 18.1148 11.882L20.2074 12.1955V10.033C20.2074 9.55778 20.3932 9.10206 20.7241 8.76606C21.055 8.43006 21.5038 8.24129 21.9717 8.24129C22.4396 8.24129 22.8884 8.43006 23.2193 8.76606C23.5502 9.10206 23.736 9.55778 23.736 10.033V34.2205C23.736 35.7022 22.5486 36.908 21.0895 36.908ZM37.9831 25.6061L36.5999 26.5199L37.4044 27.9819C37.7008 28.5194 37.8508 29.1106 37.8508 29.7413C37.8508 31.7175 36.2682 33.3246 34.2339 33.3246H32.7907L32.5048 34.7615C32.3815 35.3676 32.0562 35.912 31.5838 36.3029C31.1114 36.6939 30.5207 36.9076 29.9113 36.908C28.4521 36.908 27.2647 35.7022 27.2647 34.2205V10.033C27.2647 9.04396 28.0552 8.24129 29.0291 8.24129C30.003 8.24129 30.7934 9.04396 30.7934 10.1225V12.2851L32.8859 11.882C33.417 11.7677 33.9699 11.8219 34.4697 12.0372C34.9695 12.2524 35.3921 12.6183 35.6804 13.0855C35.9687 13.5526 36.1088 14.0984 36.0817 14.649C36.0546 15.1996 35.8617 15.7284 35.5289 16.164L33.6605 18.5774L36.6475 19.0433C37.4741 19.1792 38.2263 19.6088 38.7698 20.2557C39.3134 20.9025 39.613 21.7243 39.6152 22.5746C39.6152 23.7983 39.0047 24.9307 37.9831 25.6061Z" />
</svg>
`,
  leftArrow: `
<svg width="51" height="51" viewBox="0 0 51 51" xmlns="http://www.w3.org/2000/svg">
<g style="mix-blend-mode:color-dodge">
<path d="M50 25C50 20.0555 48.5338 15.222 45.7867 11.1107C43.0397 6.99951 39.1352 3.7952 34.5671 1.903C29.9989 0.0108147 24.9723 -0.484268 20.1227 0.480362C15.2732 1.44499 10.8186 3.82601 7.32233 7.32233C3.82602 10.8186 1.445 15.2732 0.48037 20.1227C-0.484261 24.9723 0.0108223 29.9989 1.90302 34.5671C3.7952 39.1352 6.99952 43.0397 11.1107 45.7867C15.222 48.5338 20.0555 50 51 51C28.283 50 31.5339 49.3534 34.5671 48.097C37.6002 46.8406 40.3562 44.9991 42.6777 42.6777C47.3661 37.9893 50 31.6304 50 25ZM20.35 34.225L13.2 26.725C13.0942 26.6165 13.0094 26.4894 12.95 26.35C12.8438 26.2324 12.7592 26.097 12.7 25.95C12.5677 25.6507 12.4994 25.3272 12.4994 25C12.4994 24.6728 12.5677 24.3492 12.7 24.05C12.819 23.7431 12.9974 23.4628 13.225 23.225L20.725 15.725C21.1958 15.2542 21.8342 14.9898 22.5 14.9898C23.1658 14.9898 23.8042 15.2542 24.275 15.725C24.7458 16.1958 25.0102 16.8342 25.0102 17.5C25.0102 18.1658 24.7458 18.8042 24.275 19.275L21.025 22.5H35C35.663 22.5 36.2989 22.7634 36.7678 23.2322C37.2366 23.7011 37.5 24.337 37.5 25C37.5 25.663 37.2366 26.2989 36.7678 26.7678C36.2989 27.2366 35.663 27.5 35 27.5H20.85L23.975 30.775C24.4325 31.2557 24.6803 31.8985 24.6639 32.5619C24.6475 33.2253 24.3682 33.855 23.8875 34.3125C23.4068 34.77 22.764 35.0178 22.1006 35.0014C21.4372 34.985 20.8075 34.7057 20.35 34.225Z" />
</g>
</svg>

`
};

// #endregion hardcoded SVGS (will be replaced by a proper inline svg loader when i find one)

// #region the primary Navigation bar

// navigation menu
export default ({ setPageProgress }) => {
  // state & accompanying setter
  const [sections, setSections] = useState([]); // the initial state used in jsx
  const [localState, updateLocalState] = useState(false); // forces a re-render of the compnent, which is required for consistent local functin state and jsx state
  // #region local function state (not for use in jsx!!!) requires component refresh to update
  const offset = 0;
  let prevPosition = 0;
  let sectionCPY = [];
  let ellipses = [];
  let sectionBreakpoints = [];
  // #endregion local function state (not reliable for use in jsx!!!)

  // #region useCallback functions modifying local data (cannot be referenced in jsx)
  const checkEllipses = useCallback((currentSection = 0) => {
    if (ellipses.length < 1) ellipses = document.getElementsByName("ellipses");
    updateLocalState(true); // update the ellipses

    // if still nothing, return
    if (ellipses.length < 1) return;

    ellipses[currentSection].checked = true;
    for (let i = currentSection; i < sections.length; ++i)
      if (ellipses[i].checked) sections[i][0].scrollIntoView(true);
    // sass logic handles the checked input box for us
  });
  // calculate section lengths on a 1:1 correspondence with the sections
  const measureSections = useCallback(() => {
    // if no value passed in, default to the react state held section list
    const newMeasurements = [0]; // first breakpoint is 0!
    sectionCPY
      .map(element => element[0].clientHeight) // get all the heights (in backward order)
      .reduce((accumulatedHeight, nextSectionHeight, i) => {
        // then reduce these to create a mapping of each sections height from the top of the page

        // push new measurement (first section breakpoint should be 0!)
        newMeasurements.push(accumulatedHeight - offset);

        return accumulatedHeight + nextSectionHeight; // keep accumulating
      });
    // set new measurements and re-render component to update state
    updateLocalState(true);
    sectionBreakpoints = newMeasurements; // set the new measurements on this components state so it forces an update of the UI
  });

  const handleCurrentPosition = useCallback(() => {
    let thisPosition;
    if (typeof window !== "undefined") {
      thisPosition = window.scrollY + window.innerHeight/2;//add half the view size to offset the scroll y distance
    } else {
      thisPosition = document.body.scrollTop + document.body.clientHeight/2;
    }
    const thisPageProgress =
      (thisPosition / sectionBreakpoints[sectionBreakpoints.length - 1]) * 100;
    setPageProgress(thisPageProgress > 100 ? 100 : thisPageProgress);

    if (
      thisPosition - prevPosition > 2 ||
      Math.abs(prevPosition - thisPosition) > 2
    ) {
      // we only handle every 30pixels we scroll down OR up to reduce overhead
      let currentSection;
      let iter = 0;
      // eslint-disable-next-line for-direction
      while (iter < sectionBreakpoints.length) {
        if (thisPosition > sectionBreakpoints[iter]) currentSection = iter;
        iter++;
      }
      checkEllipses(currentSection);
    }
    prevPosition = thisPosition; // now this position is the previous one
  });
  // #endregion functions modifying local data (cannot be referenced in jsx)

  // componentDidMount
  useEffect(() => {
    // #region get all the sections which will be used to determine the page height
    const documentGets = document.getElementsByTagName("section");
    sectionCPY = Object.keys(documentGets).map(elem => [documentGets[elem]]);

    if (sectionCPY.length > 0) {
      setSections(
        [
          ...sections, // prevState
          ...sectionCPY // set initial section state for local functions
        ] /* newState */
      ); // set initial section state for jsx
      // #endregion get all the sections which will be used to determine the page height

      ellipses = document.getElementsByName("ellipses");

      // #region attatch window events
      if (typeof window !== "undefined") {
        window.onresize = () => measureSections(); // recalculare section heights
        window.onscroll = () => handleCurrentPosition(); // handle logic for when we scroll
      }
      // #endregion window events

      // #region call initial window events
      measureSections(); // section state not accessible in this componentDidMount function call, use the local copy instead
      handleCurrentPosition();
      checkEllipses(0); // default to top of page
      // #end region call initial window events
    }

    // on component unmount
    return () => {
      window.removeEventListener(onresize, measureSections);
      window.removeEventListener(onscroll, handleCurrentPosition);
    };
  }, []);

  // react jsx
  return (
    <>
      <nav className="ellipses-bar" id="ellipses-bar">
        {(sections.length > 0 && (
          <>
            {/**

           */}
            {sections.map((sectionName, i) => (
              <input
                onClick={() => checkEllipses(i)}
                onChange={() => checkEllipses(i)}
                type="radio"
                name="ellipses"
                id={`ellipses-page__${i}`}
              />
            )) // sass logic handles which one is checked
            }
            <div id="slider">
              {sections.map((sectionName, i) => (
                <label key={`label${i}`} htmlFor={`ellipses-page__${i}`}>
                  <span key={`text${i}`} className="slider-label">
                    {sectionName[0].id}
                  </span>
                  <span key={`number${i}`} className="slider-number">
                    {i}
                  </span>
                  <div
                    key={`icon${i}`}
                    dangerouslySetInnerHTML={{
                      __html: navSvgs[sectionName[0].id]
                    }}
                    description="navigation icon, click me to navigate to a new section"
                  />
                </label>
              ))}
            </div>
          </>
        )) || (
          <Link to="./blog">
            <h3 className="go-back">
              <div
                dangerouslySetInnerHTML={{
                  __html: navSvgs.leftArrow
                }}
                description="navigation icon, click me to navigate to a new section"
              />
              {/** go back */}
            </h3>
          </Link>
        )}
      </nav>
    </>
  );
};
// #endregion Ellipse Navigation bar
